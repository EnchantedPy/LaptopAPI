services:
  app:
    build: .
    image: app-image
    container_name: app-container
    restart: always
    command: ["python", "main.py"]
    ports:
      - "8000:8000"
    healthcheck:
      test:
        [
          "CMD",
          "/usr/bin/env",
          "bash",
          "-c",
          "curl --fail http://app-container:8000/healthcheck || exit 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s
    volumes:
      - .:/app
    depends_on:
      - redis
      - postgres_db

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - default

  postgres_db:
    image: postgres:16-alpine
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${postgres_name}
      POSTGRES_USER: ${postgres_user}
      POSTGRES_PASSWORD: ${postgres_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${postgres_user} -d ${postgres_name}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - default

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${rmq_user}
      RABBITMQ_DEFAULT_PASS: ${rmq_password}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - default

  celery:
    image: app-image
    container_name: celery
    command: ["celery", "-A", "workers.worker", "worker", "-l", "info"]
    volumes:
      - .:/app
    depends_on:
      - app
      - rabbitmq

  flower:
    image: app-image
    command:
      ["celery", "-A", "workers.worker", "flower", "--basicauth=admin:password"]
    ports:
      - "5555:5555"
    depends_on:
      - celery

  localstack:
    container_name: aws-localstack
    image: localstack/localstack
    ports:
      - "4566:4566"
      - "9090:9090"
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=eu-central-1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  postgres_test_db:
    image: postgres:16-alpine
    container_name: postgres_test_db
    ports:
      - "5445:5445"
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      PGPORT: 5445
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db -p 5445"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - default

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${elastic_password}
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - default
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -sf -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health > /dev/null",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${elastic_password}
    ports:
      - "5601:5601"
    networks:
      - default
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -sf -u elastic:${ELASTIC_PASSWORD} http://localhost:5601/api/status > /dev/null",
        ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

networks:
  default:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq-data:
  celery:
  redis_data:
  postgres_test_data:
  elasticsearch-data:
